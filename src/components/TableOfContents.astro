---
interface Props {
	headings: {
		depth: number
		slug: string
		text: string
	}[]
}

const { headings } = Astro.props

// Filter headings to include only h2 and h3
const toc = headings.filter(({ depth }) => depth === 2 || depth === 3)
---

<div class="toc-container mb-8 p-4 rounded-lg w-[12rem] group">
	{
		toc.length > 0 && (
			<ul class="space-y-2">
				{toc.map((heading) => (
					<li class={`toc-item ${heading.depth === 3 ? 'is-h3' : 'is-h2'}`}>
						<a
							href={`#${heading.slug}`}
							class="toc-link text-gray-700 text-xs dark:text-gray-300 hover:text-black dark:hover:text-white transition-colors flex items-center"
							data-toc-link
							data-target-id={heading.slug}
							data-depth={heading.depth}
						>
							<span class="title-bar inline-block h-1 bg-gray-500/20 shrink-0 rounded-sm transition-all duration-300" />
							<span class="truncate toc-text opacity-0 group-hover:opacity-100 transition-opacity duration-300 ease-in-out">
								{heading.text}
							</span>
						</a>
					</li>
				))}
			</ul>
		)
	}
</div>

<script>
	import { throttleAndDebounce } from '@lib/utils'

	document.addEventListener('astro:page-load', () => {
		initTableOfContents()
	})

	// Initialize TOC logic
	function initTableOfContents() {
		const tocContainer = document.querySelector('.toc-container') as HTMLElement
		if (!tocContainer) return

		const tocLinks = document.querySelectorAll('[data-toc-link]')
		const onScroll = throttleAndDebounce(setActiveLink, 100)
		window.addEventListener('scroll', onScroll, { passive: true })
		let prevActiveLink: HTMLAnchorElement | null = null
		setActiveLink()

		// Add click event listeners to TOC links for better scroll positioning
		tocLinks.forEach((link) => {
			link.addEventListener('click', (e) => {
				e.preventDefault()
				const targetId = link.getAttribute('href')
				if (!targetId) return

				const targetElement = document.querySelector(targetId)
				if (targetElement) {
					// Calculate position with increased offset (120px from top)
					const yPosition = targetElement.getBoundingClientRect().top + window.pageYOffset

					// Scroll with more offset to avoid navbar overlap
					window.scrollTo({
						top: yPosition - 120,
						behavior: 'instant'
					})

					// Update URL without jumping
					history.pushState({}, '', targetId)
				}
			})
		})

		function getAbsoluteTop(element: HTMLElement): number {
			let offsetTop = 0
			while (element !== document.body) {
				if (element === null) {
					return NaN
				}
				offsetTop += element.offsetTop
				element = element.offsetParent as HTMLElement
			}
			return offsetTop
		}

		function activateLink(hash: string | null) {
			// Remove active class from all links
			document.querySelectorAll('.toc-link').forEach((link) => {
				link.classList.remove('active')
			})

			if (hash === null) {
				prevActiveLink = null
				return
			}

			// Add active class to the current link
			const currentHash = hash
			prevActiveLink = tocContainer.querySelector(`a[href="#${currentHash}"]`) as HTMLAnchorElement

			if (prevActiveLink) {
				prevActiveLink.classList.add('active')

				// If this is an h3, also activate its parent h2
				const activeHeading = document.getElementById(currentHash)
				if (activeHeading && activeHeading.tagName === 'H3') {
					let currentElement = activeHeading
					let parentH2 = null

					while (currentElement && !parentH2) {
						currentElement = currentElement.previousElementSibling as HTMLElement
						if (currentElement && currentElement.tagName === 'H2') {
							parentH2 = currentElement
						}
					}

					if (parentH2 && parentH2.id) {
						const parentLink = tocContainer.querySelector(`a[href="#${parentH2.id}"]`)
						parentLink?.classList.add('active', 'parent-active')
					}
				}
			}
		}

		function setActiveLink() {
			const scrollY = window.scrollY
			const innerHeight = window.innerHeight
			const offsetHeight = document.body.scrollHeight
			const isBottom = Math.abs(scrollY + innerHeight - offsetHeight) < 6
			const headers = Array.from(document.querySelectorAll('article :where(h2, h3)')).map((header) => {
				const headerElement = header as HTMLElement
				return {
					link: headerElement.id,
					top: getAbsoluteTop(headerElement),
					depth: headerElement.tagName === 'H2' ? 2 : 3
				}
			})
			if (!headers.length) {
				activateLink(null)
				return
			}

			if (scrollY < 1) {
				activateLink(null)
				return
			}

			if (isBottom) {
				activateLink(headers[headers.length - 1].link)
				return
			}

			let activeLink: string | null = null
			for (const { link, top } of headers) {
				if (top > scrollY + 120 + 4) {
					break
				}
				activeLink = link
			}
			activateLink(activeLink)
		}
	}
</script>

<style>
	/* Base styles for TOC items */
	.toc-item.is-h2 .title-bar {
		@apply w-4 mr-2;
	}

	.toc-item.is-h3 .title-bar {
		@apply w-2 mr-3;
	}

	/* Hover styles */
	.toc-item:hover .title-bar {
		@apply bg-gray-500/40;
	}

	/* Active styles */
	.toc-link.active {
		@apply font-bold;
	}

	.toc-link.active .title-bar {
		@apply bg-gray-500/50;
	}

	.toc-link.active .toc-text {
		@apply opacity-100;
	}

	/* Parent active styles (when parent h2 of active h3) */
	.toc-link.parent-active {
		@apply font-semibold;
	}

	.toc-link.parent-active .title-bar {
		@apply bg-gray-500/40 w-5;
	}

	/* Transitions */
	.title-bar {
		transition:
			width 0.3s cubic-bezier(0.4, 0, 0.2, 1),
			background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.toc-text {
		transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
		white-space: nowrap;
	}

	/* Individual hover effect */
	.toc-item:hover .toc-text {
		@apply opacity-100;
	}
</style>
