<div class="banner border rounded-md h-[200px] w-full"></div>

<script>
	import * as THREE from 'three'
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'
	import { OrbitControls } from 'three/addons/controls/OrbitControls.js'
	import modelKnight from '../assets/knight.vox.glb?url'

	const container = document.querySelector('.banner') as HTMLElement

	// 创建场景
	const scene = new THREE.Scene()
	scene.position.set(0, -0.8, 0)

	// 创建相机
	const camera = new THREE.PerspectiveCamera(60, container.clientWidth / container.clientHeight, 0.1, 1000)
	camera.position.set(1, 1, 2)

	// 创建渲染器
	const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })
	renderer.setSize(container.clientWidth, container.clientHeight)
	// 启用阴影
	renderer.shadowMap.enabled = true
	renderer.shadowMap.type = THREE.PCFSoftShadowMap
	renderer.setPixelRatio(window.devicePixelRatio)
	container!.appendChild(renderer.domElement)

	// 添加轨道控制器
	const controls = new OrbitControls(camera, renderer.domElement)

	// 添加光源
	const ambientLight = new THREE.AmbientLight('#eee', 2.4) // 降低环境光强度使阴影更明显
	scene.add(ambientLight)

	const directionalLight = new THREE.DirectionalLight(0xffffff, 2)
	directionalLight.position.set(5, 8, 5)
	// 设置光源投射阴影
	directionalLight.castShadow = true
	scene.add(directionalLight)

	// 添加地面以显示阴影
	const groundGeometry = new THREE.PlaneGeometry(20, 20)
	const groundMaterial = new THREE.ShadowMaterial({
		opacity: 0.2
	})
	const ground = new THREE.Mesh(groundGeometry, groundMaterial)
	ground.rotation.x = -Math.PI / 2
	ground.receiveShadow = true // 使地面接收阴影
	scene.add(ground)

	// 添加坐标轴和网格
	// scene.add(new THREE.AxesHelper(5))
	scene.add(new THREE.GridHelper(20, 10))

	// 加载材质和模型
	const loader = new GLTFLoader()

	loader.load(
		modelKnight,
		function (gltf) {
			const object = gltf.scene

			// 使模型投射和接收阴影
			object.traverse(function (child) {
				if (child instanceof THREE.Mesh) {
					child.castShadow = true
					child.receiveShadow = true
				}
			})

			scene.add(object)
		},
		function (xhr) {
			console.log((xhr.loaded / xhr.total) * 100 + '% loaded')
		},
		function (error) {
			console.error('An error occurred:', error)
		}
	)

	// 创建标志来跟踪是否正在拖拽
	let isDragging = false

	// 添加事件监听器
	controls.addEventListener('start', function () {
		isDragging = true // 拖拽开始时设置为 true
	})

	controls.addEventListener('end', function () {
		isDragging = false // 拖拽结束时设置为 false
	})

	// 动画循环
	function animate() {
		requestAnimationFrame(animate)
		if (!isDragging) {
			scene.rotation.y += 0.002 // 调整自转速度
		}
		controls.update()
		renderer.render(scene, camera)
	}

	animate()

	// 窗口大小调整
	window.addEventListener('resize', function () {
		camera.aspect = container.clientWidth / container.clientHeight
		camera.updateProjectionMatrix()
		renderer.setSize(container.clientWidth, container.clientHeight)
	})
</script>
